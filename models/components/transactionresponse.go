// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Category information assigned to the transaction for organization
type Category struct {
	// Unique identifier of the category
	ID string `json:"id"`
	// Display name of the category
	Name string `json:"name"`
	// Hex color code associated with the category for UI display
	Color string `json:"color"`
	// Tax rate of the category
	TaxRate *float64 `json:"taxRate"`
	// Tax type of the category
	TaxType *string `json:"taxType"`
	// URL-friendly slug of the category
	Slug string `json:"slug"`
}

func (o *Category) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Category) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Category) GetColor() string {
	if o == nil {
		return ""
	}
	return o.Color
}

func (o *Category) GetTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *Category) GetTaxType() *string {
	if o == nil {
		return nil
	}
	return o.TaxType
}

func (o *Category) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

// Connection - Bank connection information associated with the account
type Connection struct {
	// Unique identifier of the bank connection
	ID string `json:"id"`
	// Name of the bank institution
	Name string `json:"name"`
	// URL to the bank institution's logo image
	LogoURL *string `json:"logoUrl"`
}

func (o *Connection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Connection) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Connection) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

// Account - Bank account information associated with the transaction
type Account struct {
	// Unique identifier of the bank account
	ID string `json:"id"`
	// Display name of the bank account
	Name string `json:"name"`
	// Currency of the bank account in ISO 4217 format
	Currency string `json:"currency"`
	// Bank connection information associated with the account
	Connection Connection `json:"connection"`
}

func (o *Account) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Account) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Account) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *Account) GetConnection() Connection {
	if o == nil {
		return Connection{}
	}
	return o.Connection
}

type TransactionResponseTag struct {
	// Unique identifier of the tag
	ID string `json:"id"`
	// Display name of the tag
	Name *string `json:"name"`
}

func (o *TransactionResponseTag) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionResponseTag) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Attachment struct {
	// Unique identifier of the attachment
	ID string `json:"id"`
	// Array of path segments for the attachment file storage location
	Path []string `json:"path"`
	// Size of the attachment file in bytes
	Size float64 `json:"size"`
	// MIME type of the attachment file
	Type string `json:"type"`
	// Original filename of the attachment when uploaded
	Filename *string `json:"filename"`
}

func (o *Attachment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Attachment) GetPath() []string {
	if o == nil {
		return []string{}
	}
	return o.Path
}

func (o *Attachment) GetSize() float64 {
	if o == nil {
		return 0.0
	}
	return o.Size
}

func (o *Attachment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Attachment) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

type TransactionResponse struct {
	// Unique identifier of the transaction
	ID string `json:"id"`
	// Name or description of the transaction
	Name string `json:"name"`
	// Monetary amount of the transaction
	Amount float64 `json:"amount"`
	// Tax amount of the transaction
	TaxAmount *float64 `json:"taxAmount"`
	// Tax rate of the transaction
	TaxRate *float64 `json:"taxRate"`
	// Tax type of the transaction
	TaxType *string `json:"taxType"`
	// Currency code of the transaction in ISO 4217 format
	Currency string `json:"currency"`
	// Name of the counterparty
	CounterpartyName *string `json:"counterpartyName"`
	// Date and time of the transaction in ISO 8601 format
	Date string `json:"date"`
	// Category information assigned to the transaction for organization
	Category *Category `json:"category"`
	// Current status of the transaction
	Status string `json:"status"`
	// Whether the transaction is internal (between own accounts)
	Internal *bool `json:"internal"`
	// Whether the transaction is part of a recurring series
	Recurring *bool `json:"recurring"`
	// Whether the transaction was created manually (via API/form) rather than imported from bank connections
	Manual *bool `json:"manual"`
	// Frequency of the recurring transaction if applicable (weekly, monthly, annually, irregular)
	Frequency *string `json:"frequency"`
	// Whether the transaction has been fulfilled or processed
	IsFulfilled bool `json:"isFulfilled"`
	// Optional note or memo attached to the transaction
	Note *string `json:"note"`
	// Bank account information associated with the transaction
	Account Account `json:"account"`
	// Array of tags associated with the transaction for categorization and filtering
	Tags []TransactionResponseTag `json:"tags"`
	// Array of file attachments associated with the transaction (receipts, invoices, etc.)
	Attachments []Attachment `json:"attachments"`
}

func (o *TransactionResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionResponse) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *TransactionResponse) GetTaxAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *TransactionResponse) GetTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *TransactionResponse) GetTaxType() *string {
	if o == nil {
		return nil
	}
	return o.TaxType
}

func (o *TransactionResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransactionResponse) GetCounterpartyName() *string {
	if o == nil {
		return nil
	}
	return o.CounterpartyName
}

func (o *TransactionResponse) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

func (o *TransactionResponse) GetCategory() *Category {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *TransactionResponse) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *TransactionResponse) GetInternal() *bool {
	if o == nil {
		return nil
	}
	return o.Internal
}

func (o *TransactionResponse) GetRecurring() *bool {
	if o == nil {
		return nil
	}
	return o.Recurring
}

func (o *TransactionResponse) GetManual() *bool {
	if o == nil {
		return nil
	}
	return o.Manual
}

func (o *TransactionResponse) GetFrequency() *string {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *TransactionResponse) GetIsFulfilled() bool {
	if o == nil {
		return false
	}
	return o.IsFulfilled
}

func (o *TransactionResponse) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *TransactionResponse) GetAccount() Account {
	if o == nil {
		return Account{}
	}
	return o.Account
}

func (o *TransactionResponse) GetTags() []TransactionResponseTag {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *TransactionResponse) GetAttachments() []Attachment {
	if o == nil {
		return nil
	}
	return o.Attachments
}

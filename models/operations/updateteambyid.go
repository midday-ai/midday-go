// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

type UpdateTeamByIDRequestBody struct {
	// Name of the team or organization. Must be between 2 and 32 characters
	Name *string `json:"name,omitempty"`
	// Primary contact email address for the team
	Email *string `json:"email,omitempty"`
	// URL to the team's logo image. Must be hosted on midday.ai domain
	LogoURL *string `json:"logoUrl,omitempty"`
	// Base currency for the team in ISO 4217 format (3-letter currency code)
	BaseCurrency *string `json:"baseCurrency,omitempty"`
}

func (o *UpdateTeamByIDRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateTeamByIDRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdateTeamByIDRequestBody) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *UpdateTeamByIDRequestBody) GetBaseCurrency() *string {
	if o == nil {
		return nil
	}
	return o.BaseCurrency
}

type UpdateTeamByIDRequest struct {
	ID          string                     `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateTeamByIDRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateTeamByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateTeamByIDRequest) GetRequestBody() *UpdateTeamByIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateTeamByIDPlan - Current subscription plan of the team
type UpdateTeamByIDPlan string

const (
	UpdateTeamByIDPlanTrial   UpdateTeamByIDPlan = "trial"
	UpdateTeamByIDPlanStarter UpdateTeamByIDPlan = "starter"
	UpdateTeamByIDPlanPro     UpdateTeamByIDPlan = "pro"
)

func (e UpdateTeamByIDPlan) ToPointer() *UpdateTeamByIDPlan {
	return &e
}
func (e *UpdateTeamByIDPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trial":
		fallthrough
	case "starter":
		fallthrough
	case "pro":
		*e = UpdateTeamByIDPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamByIDPlan: %v", v)
	}
}

// UpdateTeamByIDResponseBody - Team updated
type UpdateTeamByIDResponseBody struct {
	// Unique identifier of the team
	ID string `json:"id"`
	// Name of the team or organization
	Name string `json:"name"`
	// URL to the team's logo image
	LogoURL *string `json:"logoUrl"`
	// Current subscription plan of the team
	Plan UpdateTeamByIDPlan `json:"plan"`
}

func (o *UpdateTeamByIDResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateTeamByIDResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateTeamByIDResponseBody) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *UpdateTeamByIDResponseBody) GetPlan() UpdateTeamByIDPlan {
	if o == nil {
		return UpdateTeamByIDPlan("")
	}
	return o.Plan
}

type UpdateTeamByIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Team updated
	Object *UpdateTeamByIDResponseBody
}

func (o *UpdateTeamByIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateTeamByIDResponse) GetObject() *UpdateTeamByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

// UpdateTransactionsStatus - Status to set for the transactions.
type UpdateTransactionsStatus string

const (
	UpdateTransactionsStatusPending   UpdateTransactionsStatus = "pending"
	UpdateTransactionsStatusArchived  UpdateTransactionsStatus = "archived"
	UpdateTransactionsStatusCompleted UpdateTransactionsStatus = "completed"
	UpdateTransactionsStatusPosted    UpdateTransactionsStatus = "posted"
	UpdateTransactionsStatusExcluded  UpdateTransactionsStatus = "excluded"
)

func (e UpdateTransactionsStatus) ToPointer() *UpdateTransactionsStatus {
	return &e
}
func (e *UpdateTransactionsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "archived":
		fallthrough
	case "completed":
		fallthrough
	case "posted":
		fallthrough
	case "excluded":
		*e = UpdateTransactionsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTransactionsStatus: %v", v)
	}
}

// UpdateTransactionsFrequency - Recurring frequency to set for the transactions.
type UpdateTransactionsFrequency string

const (
	UpdateTransactionsFrequencyWeekly    UpdateTransactionsFrequency = "weekly"
	UpdateTransactionsFrequencyMonthly   UpdateTransactionsFrequency = "monthly"
	UpdateTransactionsFrequencyAnnually  UpdateTransactionsFrequency = "annually"
	UpdateTransactionsFrequencyIrregular UpdateTransactionsFrequency = "irregular"
)

func (e UpdateTransactionsFrequency) ToPointer() *UpdateTransactionsFrequency {
	return &e
}
func (e *UpdateTransactionsFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weekly":
		fallthrough
	case "monthly":
		fallthrough
	case "annually":
		fallthrough
	case "irregular":
		*e = UpdateTransactionsFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTransactionsFrequency: %v", v)
	}
}

type UpdateTransactionsRequest struct {
	// Array of transaction IDs to update.
	Ids []string `json:"ids"`
	// Category slug for the transactions.
	CategorySlug *string `json:"categorySlug,omitempty"`
	// Status to set for the transactions.
	Status *UpdateTransactionsStatus `json:"status,omitempty"`
	// Recurring frequency to set for the transactions.
	Frequency *UpdateTransactionsFrequency `json:"frequency,omitempty"`
	// Whether the transactions are internal.
	Internal *bool `json:"internal,omitempty"`
	// Note to set for the transactions.
	Note *string `json:"note,omitempty"`
	// Assigned user ID for the transactions.
	AssignedID *string `json:"assignedId,omitempty"`
	// Whether the transactions are recurring.
	Recurring *bool `json:"recurring,omitempty"`
	// Tag ID to set for the transactions.
	TagID *string `json:"tagId,omitempty"`
}

func (o *UpdateTransactionsRequest) GetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.Ids
}

func (o *UpdateTransactionsRequest) GetCategorySlug() *string {
	if o == nil {
		return nil
	}
	return o.CategorySlug
}

func (o *UpdateTransactionsRequest) GetStatus() *UpdateTransactionsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateTransactionsRequest) GetFrequency() *UpdateTransactionsFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *UpdateTransactionsRequest) GetInternal() *bool {
	if o == nil {
		return nil
	}
	return o.Internal
}

func (o *UpdateTransactionsRequest) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *UpdateTransactionsRequest) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

func (o *UpdateTransactionsRequest) GetRecurring() *bool {
	if o == nil {
		return nil
	}
	return o.Recurring
}

func (o *UpdateTransactionsRequest) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

// UpdateTransactionsMeta - Pagination metadata for the transactions response
type UpdateTransactionsMeta struct {
	// Cursor for the next page of results, undefined if no more pages
	Cursor *string `json:"cursor,omitempty"`
	// Whether there are more transactions available on the previous page
	HasPreviousPage bool `json:"hasPreviousPage"`
	// Whether there are more transactions available on the next page
	HasNextPage bool `json:"hasNextPage"`
}

func (o *UpdateTransactionsMeta) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *UpdateTransactionsMeta) GetHasPreviousPage() bool {
	if o == nil {
		return false
	}
	return o.HasPreviousPage
}

func (o *UpdateTransactionsMeta) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// UpdateTransactionsResponseBody - Transactions updated
type UpdateTransactionsResponseBody struct {
	// Pagination metadata for the transactions response
	Meta UpdateTransactionsMeta `json:"meta"`
	// Array of transactions matching the query criteria
	Data []components.TransactionResponse `json:"data"`
}

func (o *UpdateTransactionsResponseBody) GetMeta() UpdateTransactionsMeta {
	if o == nil {
		return UpdateTransactionsMeta{}
	}
	return o.Meta
}

func (o *UpdateTransactionsResponseBody) GetData() []components.TransactionResponse {
	if o == nil {
		return []components.TransactionResponse{}
	}
	return o.Data
}

type UpdateTransactionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Transactions updated
	Object *UpdateTransactionsResponseBody
}

func (o *UpdateTransactionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateTransactionsResponse) GetObject() *UpdateTransactionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

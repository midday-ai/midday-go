// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/internal/utils"
	"github.com/midday-ai/midday-go/models/components"
	"time"
)

type Entry struct {
	// Start time of the tracker entry in ISO 8601 format
	Start time.Time `json:"start"`
	// Stop time of the tracker entry in ISO 8601 format
	Stop time.Time `json:"stop"`
	// Array of dates for which to create tracker entries
	Dates []string `json:"dates"`
	// Unique identifier of the user assigned to this tracker entry
	AssignedID *string `json:"assignedId"`
	// Unique identifier of the project associated with this tracker entry
	ProjectID string `json:"projectId"`
	// Optional description or notes for the tracker entry
	Description *string `json:"description,omitempty"`
	// Duration of the tracker entry in seconds
	Duration float64 `json:"duration"`
}

func (e Entry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Entry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Entry) GetStart() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Start
}

func (o *Entry) GetStop() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Stop
}

func (o *Entry) GetDates() []string {
	if o == nil {
		return []string{}
	}
	return o.Dates
}

func (o *Entry) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

func (o *Entry) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Entry) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Entry) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

type CreateTrackerEntriesBulkRequest struct {
	// Array of tracker entries to create (maximum 100 entries per request)
	Entries []Entry `json:"entries"`
}

func (o *CreateTrackerEntriesBulkRequest) GetEntries() []Entry {
	if o == nil {
		return []Entry{}
	}
	return o.Entries
}

// CreateTrackerEntriesBulkUser - User information for the person who created this tracker entry
type CreateTrackerEntriesBulkUser struct {
	// Unique identifier of the user
	ID string `json:"id"`
	// Full name of the user
	FullName string `json:"fullName"`
	// URL to the user's avatar image
	AvatarURL string `json:"avatarUrl"`
}

func (o *CreateTrackerEntriesBulkUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateTrackerEntriesBulkUser) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *CreateTrackerEntriesBulkUser) GetAvatarURL() string {
	if o == nil {
		return ""
	}
	return o.AvatarURL
}

// CreateTrackerEntriesBulkCustomer - Customer information associated with the project
type CreateTrackerEntriesBulkCustomer struct {
	// Unique identifier of the customer
	ID string `json:"id"`
	// Name of the customer or organization
	Name string `json:"name"`
}

func (o *CreateTrackerEntriesBulkCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateTrackerEntriesBulkCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// CreateTrackerEntriesBulkProject - Project information associated with this tracker entry
type CreateTrackerEntriesBulkProject struct {
	// Unique identifier of the project
	ID string `json:"id"`
	// Date and time when the project was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Default hourly rate for the project
	Rate *float64 `json:"rate"`
	// Currency code for the project rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Current status of the project
	Status string `json:"status"`
	// Description of the project
	Description *string `json:"description"`
	// Name of the project
	Name string `json:"name"`
	// Whether the project is billable to the customer
	Billable *bool `json:"billable"`
	// Estimated total hours for the project
	Estimate *float64 `json:"estimate"`
	// Customer information associated with the project
	Customer *CreateTrackerEntriesBulkCustomer `json:"customer"`
}

func (o *CreateTrackerEntriesBulkProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateTrackerEntriesBulkProject) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateTrackerEntriesBulkProject) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *CreateTrackerEntriesBulkProject) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateTrackerEntriesBulkProject) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *CreateTrackerEntriesBulkProject) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTrackerEntriesBulkProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTrackerEntriesBulkProject) GetBillable() *bool {
	if o == nil {
		return nil
	}
	return o.Billable
}

func (o *CreateTrackerEntriesBulkProject) GetEstimate() *float64 {
	if o == nil {
		return nil
	}
	return o.Estimate
}

func (o *CreateTrackerEntriesBulkProject) GetCustomer() *CreateTrackerEntriesBulkCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

type CreateTrackerEntriesBulkData struct {
	// Unique identifier of the tracker entry
	ID string `json:"id"`
	// Date and time when the tracker entry was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Duration of the tracker entry in seconds
	Duration float64 `json:"duration"`
	// Start time of the tracker entry in ISO 8601 format
	Start string `json:"start"`
	// Stop time of the tracker entry in ISO 8601 format
	Stop string `json:"stop"`
	// Unique identifier of the team that owns this tracker entry
	TeamID string `json:"teamId"`
	// Description or notes for the tracker entry
	Description *string `json:"description"`
	// Hourly rate applied to this tracker entry
	Rate *float64 `json:"rate"`
	// Currency code for the rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Whether this tracker entry has been billed to the customer
	Billed bool `json:"billed"`
	// Date of the tracker entry in YYYY-MM-DD format
	Date string `json:"date"`
	// User information for the person who created this tracker entry
	User CreateTrackerEntriesBulkUser `json:"user"`
	// Project information associated with this tracker entry
	Project CreateTrackerEntriesBulkProject `json:"project"`
}

func (o *CreateTrackerEntriesBulkData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateTrackerEntriesBulkData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateTrackerEntriesBulkData) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *CreateTrackerEntriesBulkData) GetStart() string {
	if o == nil {
		return ""
	}
	return o.Start
}

func (o *CreateTrackerEntriesBulkData) GetStop() string {
	if o == nil {
		return ""
	}
	return o.Stop
}

func (o *CreateTrackerEntriesBulkData) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *CreateTrackerEntriesBulkData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTrackerEntriesBulkData) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *CreateTrackerEntriesBulkData) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateTrackerEntriesBulkData) GetBilled() bool {
	if o == nil {
		return false
	}
	return o.Billed
}

func (o *CreateTrackerEntriesBulkData) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

func (o *CreateTrackerEntriesBulkData) GetUser() CreateTrackerEntriesBulkUser {
	if o == nil {
		return CreateTrackerEntriesBulkUser{}
	}
	return o.User
}

func (o *CreateTrackerEntriesBulkData) GetProject() CreateTrackerEntriesBulkProject {
	if o == nil {
		return CreateTrackerEntriesBulkProject{}
	}
	return o.Project
}

// CreateTrackerEntriesBulkResponseBody - Response schema for created tracker entries
type CreateTrackerEntriesBulkResponseBody struct {
	// Array of created tracker entries
	Data []CreateTrackerEntriesBulkData `json:"data"`
}

func (o *CreateTrackerEntriesBulkResponseBody) GetData() []CreateTrackerEntriesBulkData {
	if o == nil {
		return []CreateTrackerEntriesBulkData{}
	}
	return o.Data
}

type CreateTrackerEntriesBulkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Tracker entries created successfully.
	Object *CreateTrackerEntriesBulkResponseBody
}

func (o *CreateTrackerEntriesBulkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateTrackerEntriesBulkResponse) GetObject() *CreateTrackerEntriesBulkResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

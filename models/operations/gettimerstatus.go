// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/models/components"
)

type GetTimerStatusRequest struct {
	AssignedID *string `queryParam:"style=form,explode=true,name=assignedId"`
}

func (o *GetTimerStatusRequest) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

type TrackerProject struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *TrackerProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TrackerProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// CurrentEntry - Current running timer details, null if not running
type CurrentEntry struct {
	ID             string         `json:"id"`
	Start          *string        `json:"start"`
	Description    *string        `json:"description"`
	ProjectID      string         `json:"projectId"`
	TrackerProject TrackerProject `json:"trackerProject"`
}

func (o *CurrentEntry) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CurrentEntry) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *CurrentEntry) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CurrentEntry) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CurrentEntry) GetTrackerProject() TrackerProject {
	if o == nil {
		return TrackerProject{}
	}
	return o.TrackerProject
}

type GetTimerStatusData struct {
	// Whether there is currently a running timer
	IsRunning bool `json:"isRunning"`
	// Current running timer details, null if not running
	CurrentEntry *CurrentEntry `json:"currentEntry"`
	// Elapsed time in seconds for the current running timer
	ElapsedTime float64 `json:"elapsedTime"`
}

func (o *GetTimerStatusData) GetIsRunning() bool {
	if o == nil {
		return false
	}
	return o.IsRunning
}

func (o *GetTimerStatusData) GetCurrentEntry() *CurrentEntry {
	if o == nil {
		return nil
	}
	return o.CurrentEntry
}

func (o *GetTimerStatusData) GetElapsedTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.ElapsedTime
}

// GetTimerStatusResponseBody - Timer status retrieved successfully.
type GetTimerStatusResponseBody struct {
	Data GetTimerStatusData `json:"data"`
}

func (o *GetTimerStatusResponseBody) GetData() GetTimerStatusData {
	if o == nil {
		return GetTimerStatusData{}
	}
	return o.Data
}

type GetTimerStatusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Timer status retrieved successfully.
	Object *GetTimerStatusResponseBody
}

func (o *GetTimerStatusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTimerStatusResponse) GetObject() *GetTimerStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

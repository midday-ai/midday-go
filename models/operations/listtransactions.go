// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

// Attachments - Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
type Attachments string

const (
	AttachmentsInclude Attachments = "include"
	AttachmentsExclude Attachments = "exclude"
)

func (e Attachments) ToPointer() *Attachments {
	return &e
}
func (e *Attachments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "include":
		fallthrough
	case "exclude":
		*e = Attachments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Attachments: %v", v)
	}
}

// ListTransactionsType - Transaction type to filter by. 'income' for money received, 'expense' for money spent
type ListTransactionsType string

const (
	ListTransactionsTypeIncome  ListTransactionsType = "income"
	ListTransactionsTypeExpense ListTransactionsType = "expense"
)

func (e ListTransactionsType) ToPointer() *ListTransactionsType {
	return &e
}
func (e *ListTransactionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "income":
		fallthrough
	case "expense":
		*e = ListTransactionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsType: %v", v)
	}
}

type ListTransactionsRequest struct {
	Cursor     *string  `queryParam:"style=form,explode=true,name=cursor"`
	Sort       []string `queryParam:"style=form,explode=true,name=sort"`
	PageSize   *float64 `queryParam:"style=form,explode=true,name=pageSize"`
	Q          *string  `queryParam:"style=form,explode=true,name=q"`
	Categories []string `queryParam:"style=form,explode=true,name=categories"`
	Tags       []string `queryParam:"style=form,explode=true,name=tags"`
	Start      *string  `queryParam:"style=form,explode=true,name=start"`
	End        *string  `queryParam:"style=form,explode=true,name=end"`
	Accounts   []string `queryParam:"style=form,explode=true,name=accounts"`
	Assignees  []string `queryParam:"style=form,explode=true,name=assignees"`
	Statuses   []string `queryParam:"style=form,explode=true,name=statuses"`
	Recurring  []string `queryParam:"style=form,explode=true,name=recurring"`
	// Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
	Attachments *Attachments `queryParam:"style=form,explode=true,name=attachments"`
	AmountRange []*float64   `queryParam:"style=form,explode=true,name=amountRange"`
	Amount      []string     `queryParam:"style=form,explode=true,name=amount"`
	// Transaction type to filter by. 'income' for money received, 'expense' for money spent
	Type *ListTransactionsType `queryParam:"style=form,explode=true,name=type"`
}

func (o *ListTransactionsRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListTransactionsRequest) GetSort() []string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListTransactionsRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListTransactionsRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *ListTransactionsRequest) GetCategories() []string {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *ListTransactionsRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ListTransactionsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListTransactionsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *ListTransactionsRequest) GetAccounts() []string {
	if o == nil {
		return nil
	}
	return o.Accounts
}

func (o *ListTransactionsRequest) GetAssignees() []string {
	if o == nil {
		return nil
	}
	return o.Assignees
}

func (o *ListTransactionsRequest) GetStatuses() []string {
	if o == nil {
		return nil
	}
	return o.Statuses
}

func (o *ListTransactionsRequest) GetRecurring() []string {
	if o == nil {
		return nil
	}
	return o.Recurring
}

func (o *ListTransactionsRequest) GetAttachments() *Attachments {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *ListTransactionsRequest) GetAmountRange() []*float64 {
	if o == nil {
		return nil
	}
	return o.AmountRange
}

func (o *ListTransactionsRequest) GetAmount() []string {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListTransactionsRequest) GetType() *ListTransactionsType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListTransactionsMeta - Pagination metadata for the transactions response
type ListTransactionsMeta struct {
	// Cursor for the next page of results, undefined if no more pages
	Cursor *string `json:"cursor,omitempty"`
	// Whether there are more transactions available on the previous page
	HasPreviousPage bool `json:"hasPreviousPage"`
	// Whether there are more transactions available on the next page
	HasNextPage bool `json:"hasNextPage"`
}

func (o *ListTransactionsMeta) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListTransactionsMeta) GetHasPreviousPage() bool {
	if o == nil {
		return false
	}
	return o.HasPreviousPage
}

func (o *ListTransactionsMeta) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// ListTransactionsResponseBody - Retrieve a list of transactions for the authenticated team.
type ListTransactionsResponseBody struct {
	// Pagination metadata for the transactions response
	Meta ListTransactionsMeta `json:"meta"`
	// Array of transactions matching the query criteria
	Data []components.TransactionResponse `json:"data"`
}

func (o *ListTransactionsResponseBody) GetMeta() ListTransactionsMeta {
	if o == nil {
		return ListTransactionsMeta{}
	}
	return o.Meta
}

func (o *ListTransactionsResponseBody) GetData() []components.TransactionResponse {
	if o == nil {
		return []components.TransactionResponse{}
	}
	return o.Data
}

type ListTransactionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve a list of transactions for the authenticated team.
	Object *ListTransactionsResponseBody
}

func (o *ListTransactionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListTransactionsResponse) GetObject() *ListTransactionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

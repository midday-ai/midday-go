// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/internal/utils"
	"github.com/midday-ai/midday-go/models/components"
	"time"
)

type StopTimerRequest struct {
	// Unique identifier of the specific timer entry to stop. If not provided, will stop the current running timer for the user
	EntryID *string `json:"entryId,omitempty"`
	// Unique identifier of the user whose timer should be stopped. If not provided, will use the authenticated user
	AssignedID *string `json:"assignedId,omitempty"`
	// Stop time in ISO 8601 format. If not provided, will use current time
	Stop *time.Time `json:"stop,omitempty"`
}

func (s StopTimerRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StopTimerRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StopTimerRequest) GetEntryID() *string {
	if o == nil {
		return nil
	}
	return o.EntryID
}

func (o *StopTimerRequest) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

func (o *StopTimerRequest) GetStop() *time.Time {
	if o == nil {
		return nil
	}
	return o.Stop
}

// StopTimerUser - User information for the person who created this tracker entry
type StopTimerUser struct {
	// Unique identifier of the user
	ID string `json:"id"`
	// Full name of the user
	FullName string `json:"fullName"`
	// URL to the user's avatar image
	AvatarURL string `json:"avatarUrl"`
}

func (o *StopTimerUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StopTimerUser) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *StopTimerUser) GetAvatarURL() string {
	if o == nil {
		return ""
	}
	return o.AvatarURL
}

// StopTimerCustomer - Customer information associated with the project
type StopTimerCustomer struct {
	// Unique identifier of the customer
	ID string `json:"id"`
	// Name of the customer or organization
	Name string `json:"name"`
}

func (o *StopTimerCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StopTimerCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// StopTimerProject - Project information associated with this tracker entry
type StopTimerProject struct {
	// Unique identifier of the project
	ID string `json:"id"`
	// Date and time when the project was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Default hourly rate for the project
	Rate *float64 `json:"rate"`
	// Currency code for the project rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Current status of the project
	Status string `json:"status"`
	// Description of the project
	Description *string `json:"description"`
	// Name of the project
	Name string `json:"name"`
	// Whether the project is billable to the customer
	Billable *bool `json:"billable"`
	// Estimated total hours for the project
	Estimate *float64 `json:"estimate"`
	// Customer information associated with the project
	Customer *StopTimerCustomer `json:"customer"`
}

func (o *StopTimerProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StopTimerProject) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *StopTimerProject) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *StopTimerProject) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *StopTimerProject) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *StopTimerProject) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *StopTimerProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *StopTimerProject) GetBillable() *bool {
	if o == nil {
		return nil
	}
	return o.Billable
}

func (o *StopTimerProject) GetEstimate() *float64 {
	if o == nil {
		return nil
	}
	return o.Estimate
}

func (o *StopTimerProject) GetCustomer() *StopTimerCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

type StopTimerData struct {
	// Unique identifier of the tracker entry
	ID string `json:"id"`
	// Date and time when the tracker entry was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Duration of the timer entry in seconds. -1 indicates running, null for paused, positive number for completed
	Duration *float64 `json:"duration"`
	// Start time of the tracker entry in ISO 8601 format
	Start string `json:"start"`
	// Stop time of the tracker entry in ISO 8601 format
	Stop string `json:"stop"`
	// Unique identifier of the team that owns this tracker entry
	TeamID string `json:"teamId"`
	// Description or notes for the tracker entry
	Description *string `json:"description"`
	// Hourly rate applied to this tracker entry
	Rate *float64 `json:"rate"`
	// Currency code for the rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Whether this tracker entry has been billed to the customer
	Billed bool `json:"billed"`
	// Date of the tracker entry in YYYY-MM-DD format
	Date string `json:"date"`
	// User information for the person who created this tracker entry
	User StopTimerUser `json:"user"`
	// Project information associated with this tracker entry
	Project StopTimerProject `json:"project"`
}

func (o *StopTimerData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StopTimerData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *StopTimerData) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *StopTimerData) GetStart() string {
	if o == nil {
		return ""
	}
	return o.Start
}

func (o *StopTimerData) GetStop() string {
	if o == nil {
		return ""
	}
	return o.Stop
}

func (o *StopTimerData) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *StopTimerData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *StopTimerData) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *StopTimerData) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *StopTimerData) GetBilled() bool {
	if o == nil {
		return false
	}
	return o.Billed
}

func (o *StopTimerData) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

func (o *StopTimerData) GetUser() StopTimerUser {
	if o == nil {
		return StopTimerUser{}
	}
	return o.User
}

func (o *StopTimerData) GetProject() StopTimerProject {
	if o == nil {
		return StopTimerProject{}
	}
	return o.Project
}

// StopTimerResponseBody - Timer stopped successfully.
type StopTimerResponseBody struct {
	Data StopTimerData `json:"data"`
}

func (o *StopTimerResponseBody) GetData() StopTimerData {
	if o == nil {
		return StopTimerData{}
	}
	return o.Data
}

type StopTimerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Timer stopped successfully.
	Object *StopTimerResponseBody
}

func (o *StopTimerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *StopTimerResponse) GetObject() *StopTimerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

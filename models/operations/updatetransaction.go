// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

// UpdateTransactionStatus - Status of the transaction.
type UpdateTransactionStatus string

const (
	UpdateTransactionStatusPending   UpdateTransactionStatus = "pending"
	UpdateTransactionStatusArchived  UpdateTransactionStatus = "archived"
	UpdateTransactionStatusCompleted UpdateTransactionStatus = "completed"
	UpdateTransactionStatusPosted    UpdateTransactionStatus = "posted"
	UpdateTransactionStatusExcluded  UpdateTransactionStatus = "excluded"
)

func (e UpdateTransactionStatus) ToPointer() *UpdateTransactionStatus {
	return &e
}
func (e *UpdateTransactionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "archived":
		fallthrough
	case "completed":
		fallthrough
	case "posted":
		fallthrough
	case "excluded":
		*e = UpdateTransactionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTransactionStatus: %v", v)
	}
}

// UpdateTransactionFrequency - Recurring frequency of the transaction.
type UpdateTransactionFrequency string

const (
	UpdateTransactionFrequencyWeekly    UpdateTransactionFrequency = "weekly"
	UpdateTransactionFrequencyMonthly   UpdateTransactionFrequency = "monthly"
	UpdateTransactionFrequencyAnnually  UpdateTransactionFrequency = "annually"
	UpdateTransactionFrequencyIrregular UpdateTransactionFrequency = "irregular"
)

func (e UpdateTransactionFrequency) ToPointer() *UpdateTransactionFrequency {
	return &e
}
func (e *UpdateTransactionFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weekly":
		fallthrough
	case "monthly":
		fallthrough
	case "annually":
		fallthrough
	case "irregular":
		*e = UpdateTransactionFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTransactionFrequency: %v", v)
	}
}

type UpdateTransactionRequestBody struct {
	// Category slug for the transaction.
	CategorySlug *string `json:"categorySlug,omitempty"`
	// Status of the transaction.
	Status *UpdateTransactionStatus `json:"status,omitempty"`
	// Whether the transaction is internal.
	Internal *bool `json:"internal,omitempty"`
	// Whether the transaction is recurring.
	Recurring *bool `json:"recurring,omitempty"`
	// Recurring frequency of the transaction.
	Frequency *UpdateTransactionFrequency `json:"frequency,omitempty"`
	// Note for the transaction.
	Note *string `json:"note,omitempty"`
	// Assigned user ID for the transaction.
	AssignedID *string `json:"assignedId,omitempty"`
}

func (o *UpdateTransactionRequestBody) GetCategorySlug() *string {
	if o == nil {
		return nil
	}
	return o.CategorySlug
}

func (o *UpdateTransactionRequestBody) GetStatus() *UpdateTransactionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateTransactionRequestBody) GetInternal() *bool {
	if o == nil {
		return nil
	}
	return o.Internal
}

func (o *UpdateTransactionRequestBody) GetRecurring() *bool {
	if o == nil {
		return nil
	}
	return o.Recurring
}

func (o *UpdateTransactionRequestBody) GetFrequency() *UpdateTransactionFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *UpdateTransactionRequestBody) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *UpdateTransactionRequestBody) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

type UpdateTransactionRequest struct {
	ID          string                        `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateTransactionRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateTransactionRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateTransactionRequest) GetRequestBody() *UpdateTransactionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateTransactionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Transaction updated
	TransactionResponse *components.TransactionResponse
}

func (o *UpdateTransactionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateTransactionResponse) GetTransactionResponse() *components.TransactionResponse {
	if o == nil {
		return nil
	}
	return o.TransactionResponse
}

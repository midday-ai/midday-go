// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

type ListInboxItemsStatus string

const (
	ListInboxItemsStatusDone    ListInboxItemsStatus = "done"
	ListInboxItemsStatusPending ListInboxItemsStatus = "pending"
)

func (e ListInboxItemsStatus) ToPointer() *ListInboxItemsStatus {
	return &e
}
func (e *ListInboxItemsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "done":
		fallthrough
	case "pending":
		*e = ListInboxItemsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListInboxItemsStatus: %v", v)
	}
}

type ListInboxItemsRequest struct {
	Cursor   *string               `queryParam:"style=form,explode=true,name=cursor"`
	Order    *string               `queryParam:"style=form,explode=true,name=order"`
	PageSize *float64              `queryParam:"style=form,explode=true,name=pageSize"`
	Q        *string               `queryParam:"style=form,explode=true,name=q"`
	Status   *ListInboxItemsStatus `queryParam:"style=form,explode=true,name=status"`
}

func (o *ListInboxItemsRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListInboxItemsRequest) GetOrder() *string {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListInboxItemsRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListInboxItemsRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *ListInboxItemsRequest) GetStatus() *ListInboxItemsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

// ListInboxItemsMeta - Pagination metadata for the inbox list response.
type ListInboxItemsMeta struct {
	// A cursor for pagination, representing the last item from the previous page.
	Cursor *string `json:"cursor,omitempty"`
	// Whether there is a previous page of results.
	HasPreviousPage bool `json:"hasPreviousPage"`
	// Whether there is a next page of results.
	HasNextPage bool `json:"hasNextPage"`
}

func (o *ListInboxItemsMeta) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListInboxItemsMeta) GetHasPreviousPage() bool {
	if o == nil {
		return false
	}
	return o.HasPreviousPage
}

func (o *ListInboxItemsMeta) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// ListInboxItemsTransaction - Matched transaction for this inbox item, if any
type ListInboxItemsTransaction struct {
	// Transaction ID (UUID)
	ID string `json:"id"`
	// Transaction amount
	Amount float64 `json:"amount"`
	// Transaction currency (ISO 4217)
	Currency string `json:"currency"`
	// Transaction name or payee
	Name string `json:"name"`
	// Transaction date (ISO 8601)
	Date string `json:"date"`
}

func (o *ListInboxItemsTransaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListInboxItemsTransaction) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListInboxItemsTransaction) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListInboxItemsTransaction) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListInboxItemsTransaction) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

// ListInboxItemsData - Inbox item object
type ListInboxItemsData struct {
	// Inbox item ID (UUID)
	ID string `json:"id"`
	// Original file name of the uploaded document
	FileName string `json:"fileName"`
	// Path segments to the file in storage
	FilePath []string `json:"filePath"`
	// Display name for the inbox item
	DisplayName string `json:"displayName"`
	// Amount detected or entered for the inbox item
	Amount *float64 `json:"amount"`
	// Currency code (ISO 4217) for the amount
	Currency *string `json:"currency"`
	// MIME type of the uploaded file
	ContentType *string `json:"contentType"`
	// Date associated with the inbox item (ISO 8601)
	Date *string `json:"date"`
	// Status of the inbox item
	Status string `json:"status"`
	// Date and time when the inbox item was created (ISO 8601)
	CreatedAt string `json:"createdAt"`
	// Website associated with the inbox item, if any
	Website *string `json:"website"`
	// Description or notes for the inbox item
	Description *string `json:"description"`
	// Matched transaction for this inbox item, if any
	Transaction *ListInboxItemsTransaction `json:"transaction"`
}

func (o *ListInboxItemsData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListInboxItemsData) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *ListInboxItemsData) GetFilePath() []string {
	if o == nil {
		return []string{}
	}
	return o.FilePath
}

func (o *ListInboxItemsData) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *ListInboxItemsData) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListInboxItemsData) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListInboxItemsData) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *ListInboxItemsData) GetDate() *string {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *ListInboxItemsData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ListInboxItemsData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListInboxItemsData) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *ListInboxItemsData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListInboxItemsData) GetTransaction() *ListInboxItemsTransaction {
	if o == nil {
		return nil
	}
	return o.Transaction
}

// ListInboxItemsResponseBody - Retrieve a list of inbox items for the authenticated team.
type ListInboxItemsResponseBody struct {
	// Pagination metadata for the inbox list response.
	Meta ListInboxItemsMeta `json:"meta"`
	// List of inbox items
	Data []ListInboxItemsData `json:"data"`
}

func (o *ListInboxItemsResponseBody) GetMeta() ListInboxItemsMeta {
	if o == nil {
		return ListInboxItemsMeta{}
	}
	return o.Meta
}

func (o *ListInboxItemsResponseBody) GetData() []ListInboxItemsData {
	if o == nil {
		return []ListInboxItemsData{}
	}
	return o.Data
}

type ListInboxItemsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve a list of inbox items for the authenticated team.
	Object *ListInboxItemsResponseBody
}

func (o *ListInboxItemsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListInboxItemsResponse) GetObject() *ListInboxItemsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

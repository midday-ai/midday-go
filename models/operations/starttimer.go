// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/internal/utils"
	"github.com/midday-ai/midday-go/models/components"
	"time"
)

type StartTimerRequest struct {
	// Unique identifier of the project to track time for
	ProjectID string `json:"projectId"`
	// Unique identifier of the user to assign the timer to. If not provided, will use the authenticated user
	AssignedID *string `json:"assignedId,omitempty"`
	// Optional description for the timer session
	Description *string `json:"description,omitempty"`
	// Start time in ISO 8601 format. If not provided, will use current time
	Start *time.Time `json:"start,omitempty"`
	// Continue from a specific paused entry ID
	ContinueFromEntry *string `json:"continueFromEntry,omitempty"`
}

func (s StartTimerRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StartTimerRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StartTimerRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *StartTimerRequest) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

func (o *StartTimerRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *StartTimerRequest) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *StartTimerRequest) GetContinueFromEntry() *string {
	if o == nil {
		return nil
	}
	return o.ContinueFromEntry
}

// StartTimerUser - User information for the person who created this tracker entry
type StartTimerUser struct {
	// Unique identifier of the user
	ID string `json:"id"`
	// Full name of the user
	FullName string `json:"fullName"`
	// URL to the user's avatar image
	AvatarURL string `json:"avatarUrl"`
}

func (o *StartTimerUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StartTimerUser) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *StartTimerUser) GetAvatarURL() string {
	if o == nil {
		return ""
	}
	return o.AvatarURL
}

// StartTimerCustomer - Customer information associated with the project
type StartTimerCustomer struct {
	// Unique identifier of the customer
	ID string `json:"id"`
	// Name of the customer or organization
	Name string `json:"name"`
}

func (o *StartTimerCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StartTimerCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// StartTimerProject - Project information associated with this tracker entry
type StartTimerProject struct {
	// Unique identifier of the project
	ID string `json:"id"`
	// Date and time when the project was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Default hourly rate for the project
	Rate *float64 `json:"rate"`
	// Currency code for the project rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Current status of the project
	Status string `json:"status"`
	// Description of the project
	Description *string `json:"description"`
	// Name of the project
	Name string `json:"name"`
	// Whether the project is billable to the customer
	Billable *bool `json:"billable"`
	// Estimated total hours for the project
	Estimate *float64 `json:"estimate"`
	// Customer information associated with the project
	Customer *StartTimerCustomer `json:"customer"`
}

func (o *StartTimerProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StartTimerProject) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *StartTimerProject) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *StartTimerProject) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *StartTimerProject) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *StartTimerProject) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *StartTimerProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *StartTimerProject) GetBillable() *bool {
	if o == nil {
		return nil
	}
	return o.Billable
}

func (o *StartTimerProject) GetEstimate() *float64 {
	if o == nil {
		return nil
	}
	return o.Estimate
}

func (o *StartTimerProject) GetCustomer() *StartTimerCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

type StartTimerData struct {
	// Unique identifier of the tracker entry
	ID string `json:"id"`
	// Date and time when the tracker entry was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Duration of the timer entry in seconds. -1 indicates running, null for paused, positive number for completed
	Duration *float64 `json:"duration"`
	// Start time of the tracker entry in ISO 8601 format
	Start string `json:"start"`
	// Stop time of the tracker entry in ISO 8601 format
	Stop string `json:"stop"`
	// Unique identifier of the team that owns this tracker entry
	TeamID string `json:"teamId"`
	// Description or notes for the tracker entry
	Description *string `json:"description"`
	// Hourly rate applied to this tracker entry
	Rate *float64 `json:"rate"`
	// Currency code for the rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Whether this tracker entry has been billed to the customer
	Billed bool `json:"billed"`
	// Date of the tracker entry in YYYY-MM-DD format
	Date string `json:"date"`
	// User information for the person who created this tracker entry
	User StartTimerUser `json:"user"`
	// Project information associated with this tracker entry
	Project StartTimerProject `json:"project"`
}

func (o *StartTimerData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StartTimerData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *StartTimerData) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *StartTimerData) GetStart() string {
	if o == nil {
		return ""
	}
	return o.Start
}

func (o *StartTimerData) GetStop() string {
	if o == nil {
		return ""
	}
	return o.Stop
}

func (o *StartTimerData) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *StartTimerData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *StartTimerData) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *StartTimerData) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *StartTimerData) GetBilled() bool {
	if o == nil {
		return false
	}
	return o.Billed
}

func (o *StartTimerData) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

func (o *StartTimerData) GetUser() StartTimerUser {
	if o == nil {
		return StartTimerUser{}
	}
	return o.User
}

func (o *StartTimerData) GetProject() StartTimerProject {
	if o == nil {
		return StartTimerProject{}
	}
	return o.Project
}

// StartTimerResponseBody - Timer started successfully.
type StartTimerResponseBody struct {
	Data StartTimerData `json:"data"`
}

func (o *StartTimerResponseBody) GetData() StartTimerData {
	if o == nil {
		return StartTimerData{}
	}
	return o.Data
}

type StartTimerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Timer started successfully.
	Object *StartTimerResponseBody
}

func (o *StartTimerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *StartTimerResponse) GetObject() *StartTimerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

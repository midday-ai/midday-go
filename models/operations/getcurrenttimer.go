// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/models/components"
)

type GetCurrentTimerRequest struct {
	AssignedID *string `queryParam:"style=form,explode=true,name=assignedId"`
}

func (o *GetCurrentTimerRequest) GetAssignedID() *string {
	if o == nil {
		return nil
	}
	return o.AssignedID
}

// GetCurrentTimerUser - User information for the person who created this tracker entry
type GetCurrentTimerUser struct {
	// Unique identifier of the user
	ID string `json:"id"`
	// Full name of the user
	FullName string `json:"fullName"`
	// URL to the user's avatar image
	AvatarURL string `json:"avatarUrl"`
}

func (o *GetCurrentTimerUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCurrentTimerUser) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *GetCurrentTimerUser) GetAvatarURL() string {
	if o == nil {
		return ""
	}
	return o.AvatarURL
}

// GetCurrentTimerCustomer - Customer information associated with the project
type GetCurrentTimerCustomer struct {
	// Unique identifier of the customer
	ID string `json:"id"`
	// Name of the customer or organization
	Name string `json:"name"`
}

func (o *GetCurrentTimerCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCurrentTimerCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// GetCurrentTimerProject - Project information associated with this tracker entry
type GetCurrentTimerProject struct {
	// Unique identifier of the project
	ID string `json:"id"`
	// Date and time when the project was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Default hourly rate for the project
	Rate *float64 `json:"rate"`
	// Currency code for the project rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Current status of the project
	Status string `json:"status"`
	// Description of the project
	Description *string `json:"description"`
	// Name of the project
	Name string `json:"name"`
	// Whether the project is billable to the customer
	Billable *bool `json:"billable"`
	// Estimated total hours for the project
	Estimate *float64 `json:"estimate"`
	// Customer information associated with the project
	Customer *GetCurrentTimerCustomer `json:"customer"`
}

func (o *GetCurrentTimerProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCurrentTimerProject) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetCurrentTimerProject) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *GetCurrentTimerProject) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *GetCurrentTimerProject) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *GetCurrentTimerProject) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetCurrentTimerProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetCurrentTimerProject) GetBillable() *bool {
	if o == nil {
		return nil
	}
	return o.Billable
}

func (o *GetCurrentTimerProject) GetEstimate() *float64 {
	if o == nil {
		return nil
	}
	return o.Estimate
}

func (o *GetCurrentTimerProject) GetCustomer() *GetCurrentTimerCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

type GetCurrentTimerData struct {
	// Unique identifier of the tracker entry
	ID string `json:"id"`
	// Date and time when the tracker entry was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Duration of the timer entry in seconds. -1 indicates running, null for paused, positive number for completed
	Duration *float64 `json:"duration"`
	// Start time of the tracker entry in ISO 8601 format
	Start string `json:"start"`
	// Stop time of the tracker entry in ISO 8601 format
	Stop string `json:"stop"`
	// Unique identifier of the team that owns this tracker entry
	TeamID string `json:"teamId"`
	// Description or notes for the tracker entry
	Description *string `json:"description"`
	// Hourly rate applied to this tracker entry
	Rate *float64 `json:"rate"`
	// Currency code for the rate in ISO 4217 format
	Currency *string `json:"currency"`
	// Whether this tracker entry has been billed to the customer
	Billed bool `json:"billed"`
	// Date of the tracker entry in YYYY-MM-DD format
	Date string `json:"date"`
	// User information for the person who created this tracker entry
	User GetCurrentTimerUser `json:"user"`
	// Project information associated with this tracker entry
	Project GetCurrentTimerProject `json:"project"`
}

func (o *GetCurrentTimerData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCurrentTimerData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetCurrentTimerData) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetCurrentTimerData) GetStart() string {
	if o == nil {
		return ""
	}
	return o.Start
}

func (o *GetCurrentTimerData) GetStop() string {
	if o == nil {
		return ""
	}
	return o.Stop
}

func (o *GetCurrentTimerData) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *GetCurrentTimerData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetCurrentTimerData) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *GetCurrentTimerData) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *GetCurrentTimerData) GetBilled() bool {
	if o == nil {
		return false
	}
	return o.Billed
}

func (o *GetCurrentTimerData) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

func (o *GetCurrentTimerData) GetUser() GetCurrentTimerUser {
	if o == nil {
		return GetCurrentTimerUser{}
	}
	return o.User
}

func (o *GetCurrentTimerData) GetProject() GetCurrentTimerProject {
	if o == nil {
		return GetCurrentTimerProject{}
	}
	return o.Project
}

// GetCurrentTimerResponseBody - Current timer retrieved successfully.
type GetCurrentTimerResponseBody struct {
	Data *GetCurrentTimerData `json:"data"`
}

func (o *GetCurrentTimerResponseBody) GetData() *GetCurrentTimerData {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetCurrentTimerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Current timer retrieved successfully.
	Object *GetCurrentTimerResponseBody
}

func (o *GetCurrentTimerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetCurrentTimerResponse) GetObject() *GetCurrentTimerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

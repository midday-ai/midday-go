// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

// DateFormatRequest - User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
type DateFormatRequest string

const (
	DateFormatRequestDdSlashMmSlashyyyy DateFormatRequest = "dd/MM/yyyy"
	DateFormatRequestMmSlashddSlashyyyy DateFormatRequest = "MM/dd/yyyy"
	DateFormatRequestYyyyDashMmDashdd   DateFormatRequest = "yyyy-MM-dd"
	DateFormatRequestDdDotMmDotyyyy     DateFormatRequest = "dd.MM.yyyy"
)

func (e DateFormatRequest) ToPointer() *DateFormatRequest {
	return &e
}
func (e *DateFormatRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd.MM.yyyy":
		*e = DateFormatRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateFormatRequest: %v", v)
	}
}

type UpdateCurrentUserRequest struct {
	// Full name of the user. Must be between 2 and 32 characters
	FullName *string `json:"fullName,omitempty"`
	// Unique identifier of the team the user belongs to
	TeamID *string `json:"teamId,omitempty"`
	// Email address of the user
	Email *string `json:"email,omitempty"`
	// URL to the user's avatar image. Must be hosted on midday.ai domain
	AvatarURL *string `json:"avatarUrl,omitempty"`
	// User's preferred locale for internationalization (language and region)
	Locale *string `json:"locale,omitempty"`
	// Whether the user's calendar week starts on Monday (true) or Sunday (false)
	WeekStartsOnMonday *bool `json:"weekStartsOnMonday,omitempty"`
	// User's timezone identifier in IANA Time Zone Database format
	Timezone *string `json:"timezone,omitempty"`
	// User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
	TimeFormat *float64 `json:"timeFormat,omitempty"`
	// User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
	DateFormat *DateFormatRequest `json:"dateFormat,omitempty"`
}

func (o *UpdateCurrentUserRequest) GetFullName() *string {
	if o == nil {
		return nil
	}
	return o.FullName
}

func (o *UpdateCurrentUserRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateCurrentUserRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdateCurrentUserRequest) GetAvatarURL() *string {
	if o == nil {
		return nil
	}
	return o.AvatarURL
}

func (o *UpdateCurrentUserRequest) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdateCurrentUserRequest) GetWeekStartsOnMonday() *bool {
	if o == nil {
		return nil
	}
	return o.WeekStartsOnMonday
}

func (o *UpdateCurrentUserRequest) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *UpdateCurrentUserRequest) GetTimeFormat() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeFormat
}

func (o *UpdateCurrentUserRequest) GetDateFormat() *DateFormatRequest {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

// UpdateCurrentUserDateFormatResponse - User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
type UpdateCurrentUserDateFormatResponse string

const (
	UpdateCurrentUserDateFormatResponseDdSlashMmSlashyyyy UpdateCurrentUserDateFormatResponse = "dd/MM/yyyy"
	UpdateCurrentUserDateFormatResponseMmSlashddSlashyyyy UpdateCurrentUserDateFormatResponse = "MM/dd/yyyy"
	UpdateCurrentUserDateFormatResponseYyyyDashMmDashdd   UpdateCurrentUserDateFormatResponse = "yyyy-MM-dd"
	UpdateCurrentUserDateFormatResponseDdDotMmDotyyyy     UpdateCurrentUserDateFormatResponse = "dd.MM.yyyy"
)

func (e UpdateCurrentUserDateFormatResponse) ToPointer() *UpdateCurrentUserDateFormatResponse {
	return &e
}
func (e *UpdateCurrentUserDateFormatResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd.MM.yyyy":
		*e = UpdateCurrentUserDateFormatResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCurrentUserDateFormatResponse: %v", v)
	}
}

// UpdateCurrentUserTeam - Team information that the user belongs to
type UpdateCurrentUserTeam struct {
	// Unique identifier of the team
	ID string `json:"id"`
	// Name of the team or organization
	Name string `json:"name"`
	// URL to the team's logo image
	LogoURL string `json:"logoUrl"`
	// Current subscription plan of the team
	Plan string `json:"plan"`
}

func (o *UpdateCurrentUserTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCurrentUserTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateCurrentUserTeam) GetLogoURL() string {
	if o == nil {
		return ""
	}
	return o.LogoURL
}

func (o *UpdateCurrentUserTeam) GetPlan() string {
	if o == nil {
		return ""
	}
	return o.Plan
}

// UpdateCurrentUserResponseBody - The updated user
type UpdateCurrentUserResponseBody struct {
	// Unique identifier of the user
	ID string `json:"id"`
	// Full name of the user
	FullName string `json:"fullName"`
	// Email address of the user
	Email string `json:"email"`
	// URL to the user's avatar image
	AvatarURL *string `json:"avatarUrl"`
	// User's preferred locale for internationalization (language and region)
	Locale *string `json:"locale"`
	// Whether the user's calendar week starts on Monday (true) or Sunday (false)
	WeekStartsOnMonday *bool `json:"weekStartsOnMonday"`
	// User's timezone identifier in IANA Time Zone Database format
	Timezone *string `json:"timezone"`
	// User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
	TimeFormat *float64 `json:"timeFormat"`
	// User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
	DateFormat *UpdateCurrentUserDateFormatResponse `json:"dateFormat"`
	// Team information that the user belongs to
	Team *UpdateCurrentUserTeam `json:"team"`
}

func (o *UpdateCurrentUserResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCurrentUserResponseBody) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *UpdateCurrentUserResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateCurrentUserResponseBody) GetAvatarURL() *string {
	if o == nil {
		return nil
	}
	return o.AvatarURL
}

func (o *UpdateCurrentUserResponseBody) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdateCurrentUserResponseBody) GetWeekStartsOnMonday() *bool {
	if o == nil {
		return nil
	}
	return o.WeekStartsOnMonday
}

func (o *UpdateCurrentUserResponseBody) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *UpdateCurrentUserResponseBody) GetTimeFormat() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeFormat
}

func (o *UpdateCurrentUserResponseBody) GetDateFormat() *UpdateCurrentUserDateFormatResponse {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *UpdateCurrentUserResponseBody) GetTeam() *UpdateCurrentUserTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

type UpdateCurrentUserResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated user
	Object *UpdateCurrentUserResponseBody
}

func (o *UpdateCurrentUserResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateCurrentUserResponse) GetObject() *UpdateCurrentUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

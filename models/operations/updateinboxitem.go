// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

type UpdateInboxItemStatus string

const (
	UpdateInboxItemStatusNew        UpdateInboxItemStatus = "new"
	UpdateInboxItemStatusArchived   UpdateInboxItemStatus = "archived"
	UpdateInboxItemStatusProcessing UpdateInboxItemStatus = "processing"
	UpdateInboxItemStatusDone       UpdateInboxItemStatus = "done"
	UpdateInboxItemStatusPending    UpdateInboxItemStatus = "pending"
)

func (e UpdateInboxItemStatus) ToPointer() *UpdateInboxItemStatus {
	return &e
}
func (e *UpdateInboxItemStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "archived":
		fallthrough
	case "processing":
		fallthrough
	case "done":
		fallthrough
	case "pending":
		*e = UpdateInboxItemStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInboxItemStatus: %v", v)
	}
}

type UpdateInboxItemRequestBody struct {
	Status      *UpdateInboxItemStatus `json:"status,omitempty"`
	DisplayName *string                `json:"displayName,omitempty"`
	Currency    *string                `json:"currency,omitempty"`
	Amount      *float64               `json:"amount,omitempty"`
}

func (o *UpdateInboxItemRequestBody) GetStatus() *UpdateInboxItemStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateInboxItemRequestBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *UpdateInboxItemRequestBody) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *UpdateInboxItemRequestBody) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

type UpdateInboxItemRequest struct {
	ID          string                     `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateInboxItemRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateInboxItemRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateInboxItemRequest) GetRequestBody() UpdateInboxItemRequestBody {
	if o == nil {
		return UpdateInboxItemRequestBody{}
	}
	return o.RequestBody
}

// UpdateInboxItemTransaction - Matched transaction for this inbox item, if any
type UpdateInboxItemTransaction struct {
	// Transaction ID (UUID)
	ID string `json:"id"`
	// Transaction amount
	Amount float64 `json:"amount"`
	// Transaction currency (ISO 4217)
	Currency string `json:"currency"`
	// Transaction name or payee
	Name string `json:"name"`
	// Transaction date (ISO 8601)
	Date string `json:"date"`
}

func (o *UpdateInboxItemTransaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateInboxItemTransaction) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *UpdateInboxItemTransaction) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateInboxItemTransaction) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateInboxItemTransaction) GetDate() string {
	if o == nil {
		return ""
	}
	return o.Date
}

// UpdateInboxItemResponseBody - Inbox item object
type UpdateInboxItemResponseBody struct {
	// Inbox item ID (UUID)
	ID string `json:"id"`
	// Original file name of the uploaded document
	FileName string `json:"fileName"`
	// Path segments to the file in storage
	FilePath []string `json:"filePath"`
	// Display name for the inbox item
	DisplayName string `json:"displayName"`
	// Amount detected or entered for the inbox item
	Amount *float64 `json:"amount"`
	// Currency code (ISO 4217) for the amount
	Currency *string `json:"currency"`
	// MIME type of the uploaded file
	ContentType *string `json:"contentType"`
	// Date associated with the inbox item (ISO 8601)
	Date *string `json:"date"`
	// Status of the inbox item
	Status string `json:"status"`
	// Date and time when the inbox item was created (ISO 8601)
	CreatedAt string `json:"createdAt"`
	// Website associated with the inbox item, if any
	Website *string `json:"website"`
	// Description or notes for the inbox item
	Description *string `json:"description"`
	// Matched transaction for this inbox item, if any
	Transaction *UpdateInboxItemTransaction `json:"transaction"`
}

func (o *UpdateInboxItemResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateInboxItemResponseBody) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *UpdateInboxItemResponseBody) GetFilePath() []string {
	if o == nil {
		return []string{}
	}
	return o.FilePath
}

func (o *UpdateInboxItemResponseBody) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *UpdateInboxItemResponseBody) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdateInboxItemResponseBody) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *UpdateInboxItemResponseBody) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *UpdateInboxItemResponseBody) GetDate() *string {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *UpdateInboxItemResponseBody) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *UpdateInboxItemResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateInboxItemResponseBody) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *UpdateInboxItemResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateInboxItemResponseBody) GetTransaction() *UpdateInboxItemTransaction {
	if o == nil {
		return nil
	}
	return o.Transaction
}

type UpdateInboxItemResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Update fields of an inbox item by its unique identifier for the authenticated team.
	Object *UpdateInboxItemResponseBody
}

func (o *UpdateInboxItemResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateInboxItemResponse) GetObject() *UpdateInboxItemResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

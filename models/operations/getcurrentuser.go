// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/models/components"
)

// GetCurrentUserDateFormat - User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
type GetCurrentUserDateFormat string

const (
	GetCurrentUserDateFormatDdSlashMmSlashyyyy GetCurrentUserDateFormat = "dd/MM/yyyy"
	GetCurrentUserDateFormatMmSlashddSlashyyyy GetCurrentUserDateFormat = "MM/dd/yyyy"
	GetCurrentUserDateFormatYyyyDashMmDashdd   GetCurrentUserDateFormat = "yyyy-MM-dd"
	GetCurrentUserDateFormatDdDotMmDotyyyy     GetCurrentUserDateFormat = "dd.MM.yyyy"
)

func (e GetCurrentUserDateFormat) ToPointer() *GetCurrentUserDateFormat {
	return &e
}
func (e *GetCurrentUserDateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd.MM.yyyy":
		*e = GetCurrentUserDateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCurrentUserDateFormat: %v", v)
	}
}

// GetCurrentUserTeam - Team information that the user belongs to
type GetCurrentUserTeam struct {
	// Unique identifier of the team
	ID string `json:"id"`
	// Name of the team or organization
	Name string `json:"name"`
	// URL to the team's logo image
	LogoURL string `json:"logoUrl"`
	// Current subscription plan of the team
	Plan string `json:"plan"`
}

func (o *GetCurrentUserTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCurrentUserTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetCurrentUserTeam) GetLogoURL() string {
	if o == nil {
		return ""
	}
	return o.LogoURL
}

func (o *GetCurrentUserTeam) GetPlan() string {
	if o == nil {
		return ""
	}
	return o.Plan
}

// GetCurrentUserResponseBody - Retrieve the current user for the authenticated team.
type GetCurrentUserResponseBody struct {
	// Unique identifier of the user
	ID string `json:"id"`
	// Full name of the user
	FullName string `json:"fullName"`
	// Email address of the user
	Email string `json:"email"`
	// URL to the user's avatar image
	AvatarURL *string `json:"avatarUrl"`
	// User's preferred locale for internationalization (language and region)
	Locale *string `json:"locale"`
	// Whether the user's calendar week starts on Monday (true) or Sunday (false)
	WeekStartsOnMonday *bool `json:"weekStartsOnMonday"`
	// User's timezone identifier in IANA Time Zone Database format
	Timezone *string `json:"timezone"`
	// User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
	TimeFormat *float64 `json:"timeFormat"`
	// User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
	DateFormat *GetCurrentUserDateFormat `json:"dateFormat"`
	// Team information that the user belongs to
	Team *GetCurrentUserTeam `json:"team"`
}

func (o *GetCurrentUserResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCurrentUserResponseBody) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *GetCurrentUserResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetCurrentUserResponseBody) GetAvatarURL() *string {
	if o == nil {
		return nil
	}
	return o.AvatarURL
}

func (o *GetCurrentUserResponseBody) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetCurrentUserResponseBody) GetWeekStartsOnMonday() *bool {
	if o == nil {
		return nil
	}
	return o.WeekStartsOnMonday
}

func (o *GetCurrentUserResponseBody) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *GetCurrentUserResponseBody) GetTimeFormat() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeFormat
}

func (o *GetCurrentUserResponseBody) GetDateFormat() *GetCurrentUserDateFormat {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *GetCurrentUserResponseBody) GetTeam() *GetCurrentUserTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

type GetCurrentUserResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve the current user for the authenticated team.
	Object *GetCurrentUserResponseBody
}

func (o *GetCurrentUserResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetCurrentUserResponse) GetObject() *GetCurrentUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

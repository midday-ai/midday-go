// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/models/components"
)

type ListCustomersRequest struct {
	Q        *string  `queryParam:"style=form,explode=true,name=q"`
	Sort     []string `queryParam:"style=form,explode=true,name=sort"`
	Cursor   *string  `queryParam:"style=form,explode=true,name=cursor"`
	PageSize *float64 `queryParam:"style=form,explode=true,name=pageSize"`
}

func (o *ListCustomersRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *ListCustomersRequest) GetSort() []string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCustomersRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListCustomersRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

// ListCustomersMeta - Pagination metadata for the customers response
type ListCustomersMeta struct {
	// Cursor for the next page of results, null if no more pages
	Cursor *string `json:"cursor"`
	// Whether there are more customers available on the previous page
	HasPreviousPage bool `json:"hasPreviousPage"`
	// Whether there are more customers available on the next page
	HasNextPage bool `json:"hasNextPage"`
}

func (o *ListCustomersMeta) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListCustomersMeta) GetHasPreviousPage() bool {
	if o == nil {
		return false
	}
	return o.HasPreviousPage
}

func (o *ListCustomersMeta) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

type ListCustomersTag struct {
	// Unique identifier of the tag
	ID string `json:"id"`
	// Display name of the tag
	Name string `json:"name"`
}

func (o *ListCustomersTag) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomersTag) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListCustomersData struct {
	// Unique identifier of the customer
	ID string `json:"id"`
	// Name of the customer or organization
	Name string `json:"name"`
	// Primary email address of the customer
	Email string `json:"email"`
	// Primary phone number of the customer
	Phone *string `json:"phone"`
	// Website URL of the customer
	Website *string `json:"website"`
	// Date and time when the customer was created in ISO 8601 format
	CreatedAt string `json:"createdAt"`
	// Country name where the customer is located
	Country *string `json:"country"`
	// First line of the customer's address
	AddressLine1 *string `json:"addressLine1"`
	// Second line of the customer's address (suite, apartment, etc.)
	AddressLine2 *string `json:"addressLine2"`
	// City where the customer is located
	City *string `json:"city"`
	// State or province where the customer is located
	State *string `json:"state"`
	// ZIP or postal code of the customer's address
	Zip *string `json:"zip"`
	// Internal notes about the customer for team reference
	Note *string `json:"note"`
	// VAT (Value Added Tax) number of the customer
	VatNumber *string `json:"vatNumber"`
	// Country code in ISO 3166-1 alpha-2 format
	CountryCode *string `json:"countryCode"`
	// Unique token for the customer (used for internal identification)
	Token string `json:"token"`
	// Primary contact person's name at the customer organization
	Contact *string `json:"contact"`
	// Total number of invoices created for this customer
	InvoiceCount float64 `json:"invoiceCount"`
	// Total number of projects associated with this customer
	ProjectCount float64 `json:"projectCount"`
	// Array of tags associated with the customer for categorization
	Tags []ListCustomersTag `json:"tags"`
}

func (o *ListCustomersData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomersData) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCustomersData) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ListCustomersData) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListCustomersData) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *ListCustomersData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListCustomersData) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *ListCustomersData) GetAddressLine1() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine1
}

func (o *ListCustomersData) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListCustomersData) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListCustomersData) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *ListCustomersData) GetZip() *string {
	if o == nil {
		return nil
	}
	return o.Zip
}

func (o *ListCustomersData) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *ListCustomersData) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *ListCustomersData) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *ListCustomersData) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *ListCustomersData) GetContact() *string {
	if o == nil {
		return nil
	}
	return o.Contact
}

func (o *ListCustomersData) GetInvoiceCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.InvoiceCount
}

func (o *ListCustomersData) GetProjectCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectCount
}

func (o *ListCustomersData) GetTags() []ListCustomersTag {
	if o == nil {
		return []ListCustomersTag{}
	}
	return o.Tags
}

// ListCustomersResponseBody - Retrieve a list of customers for the authenticated team.
type ListCustomersResponseBody struct {
	// Pagination metadata for the customers response
	Meta ListCustomersMeta `json:"meta"`
	// Array of customers matching the query criteria
	Data []ListCustomersData `json:"data"`
}

func (o *ListCustomersResponseBody) GetMeta() ListCustomersMeta {
	if o == nil {
		return ListCustomersMeta{}
	}
	return o.Meta
}

func (o *ListCustomersResponseBody) GetData() []ListCustomersData {
	if o == nil {
		return []ListCustomersData{}
	}
	return o.Data
}

type ListCustomersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve a list of customers for the authenticated team.
	Object *ListCustomersResponseBody
}

func (o *ListCustomersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListCustomersResponse) GetObject() *ListCustomersResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/midday-ai/midday-go/internal/utils"
	"github.com/midday-ai/midday-go/models/components"
)

// UpdateTrackerProjectStatus - Current status of the project
type UpdateTrackerProjectStatus string

const (
	UpdateTrackerProjectStatusInProgress UpdateTrackerProjectStatus = "in_progress"
	UpdateTrackerProjectStatusCompleted  UpdateTrackerProjectStatus = "completed"
)

func (e UpdateTrackerProjectStatus) ToPointer() *UpdateTrackerProjectStatus {
	return &e
}
func (e *UpdateTrackerProjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_progress":
		fallthrough
	case "completed":
		*e = UpdateTrackerProjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTrackerProjectStatus: %v", v)
	}
}

type UpdateTrackerProjectTag struct {
	// Unique identifier of the tag
	ID string `json:"id"`
	// Display value of the tag
	Value string `json:"value"`
}

func (o *UpdateTrackerProjectTag) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateTrackerProjectTag) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateTrackerProjectRequestBody struct {
	// Name of the project
	Name string `json:"name"`
	// Detailed description of the project
	Description *string `json:"description,omitempty"`
	// Estimated total hours required to complete the project
	Estimate *float64 `json:"estimate,omitempty"`
	// Whether the project is billable to the customer
	Billable *bool `default:"false" json:"billable"`
	// Hourly rate for the project in the specified currency
	Rate *float64 `json:"rate,omitempty"`
	// Currency code for the project rate in ISO 4217 format
	Currency *string `json:"currency,omitempty"`
	// Current status of the project
	Status *UpdateTrackerProjectStatus `json:"status,omitempty"`
	// Unique identifier of the customer associated with this project
	CustomerID *string `json:"customerId,omitempty"`
	// Array of tags to associate with the project
	Tags []UpdateTrackerProjectTag `json:"tags,omitempty"`
}

func (u UpdateTrackerProjectRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateTrackerProjectRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateTrackerProjectRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateTrackerProjectRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateTrackerProjectRequestBody) GetEstimate() *float64 {
	if o == nil {
		return nil
	}
	return o.Estimate
}

func (o *UpdateTrackerProjectRequestBody) GetBillable() *bool {
	if o == nil {
		return nil
	}
	return o.Billable
}

func (o *UpdateTrackerProjectRequestBody) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *UpdateTrackerProjectRequestBody) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *UpdateTrackerProjectRequestBody) GetStatus() *UpdateTrackerProjectStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateTrackerProjectRequestBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *UpdateTrackerProjectRequestBody) GetTags() []UpdateTrackerProjectTag {
	if o == nil {
		return nil
	}
	return o.Tags
}

type UpdateTrackerProjectRequest struct {
	ID          string                           `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateTrackerProjectRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateTrackerProjectRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateTrackerProjectRequest) GetRequestBody() *UpdateTrackerProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateTrackerProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Tracker project updated successfully.
	TrackerProjectResponse *components.TrackerProjectResponse
}

func (o *UpdateTrackerProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateTrackerProjectResponse) GetTrackerProjectResponse() *components.TrackerProjectResponse {
	if o == nil {
		return nil
	}
	return o.TrackerProjectResponse
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/midday-ai/midday-go/models/components"
)

type ListDocumentsRequest struct {
	Cursor   *string  `queryParam:"style=form,explode=true,name=cursor"`
	Sort     []string `queryParam:"style=form,explode=true,name=sort"`
	PageSize *float64 `queryParam:"style=form,explode=true,name=pageSize"`
	Q        *string  `queryParam:"style=form,explode=true,name=q"`
	Tags     []string `queryParam:"style=form,explode=true,name=tags"`
}

func (o *ListDocumentsRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListDocumentsRequest) GetSort() []string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListDocumentsRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListDocumentsRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *ListDocumentsRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

// ListDocumentsMeta - Pagination metadata for the documents list.
type ListDocumentsMeta struct {
	// Cursor for pagination.
	Cursor *string `json:"cursor,omitempty"`
	// Whether there is a previous page.
	HasPreviousPage bool `json:"hasPreviousPage"`
	// Whether there is a next page.
	HasNextPage bool `json:"hasNextPage"`
}

func (o *ListDocumentsMeta) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListDocumentsMeta) GetHasPreviousPage() bool {
	if o == nil {
		return false
	}
	return o.HasPreviousPage
}

func (o *ListDocumentsMeta) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// ListDocumentsMetadata - Metadata about the document.
type ListDocumentsMetadata struct {
	// Size of the document in bytes.
	Size *float64 `json:"size"`
	// MIME type of the document.
	Mimetype *string `json:"mimetype"`
}

func (o *ListDocumentsMetadata) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListDocumentsMetadata) GetMimetype() *string {
	if o == nil {
		return nil
	}
	return o.Mimetype
}

// ListDocumentsData - A single document object response.
type ListDocumentsData struct {
	// Unique identifier for the document.
	ID string `json:"id"`
	// Title of the document.
	Title *string `json:"title"`
	// Array of path tokens representing the document's location.
	PathTokens []string `json:"pathTokens"`
	// Metadata about the document.
	Metadata *ListDocumentsMetadata `json:"metadata"`
	// Processing status of the document.
	ProcessingStatus string `json:"processingStatus"`
	// Summary or extracted content from the document.
	Summary *string `json:"summary"`
	// Date associated with the document (ISO 8601).
	Date *string `json:"date"`
}

func (o *ListDocumentsData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListDocumentsData) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListDocumentsData) GetPathTokens() []string {
	if o == nil {
		return []string{}
	}
	return o.PathTokens
}

func (o *ListDocumentsData) GetMetadata() *ListDocumentsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListDocumentsData) GetProcessingStatus() string {
	if o == nil {
		return ""
	}
	return o.ProcessingStatus
}

func (o *ListDocumentsData) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *ListDocumentsData) GetDate() *string {
	if o == nil {
		return nil
	}
	return o.Date
}

// ListDocumentsResponseBody - Response containing a list of documents and pagination metadata.
type ListDocumentsResponseBody struct {
	// Pagination metadata for the documents list.
	Meta ListDocumentsMeta `json:"meta"`
	// Array of document objects.
	Data []ListDocumentsData `json:"data"`
}

func (o *ListDocumentsResponseBody) GetMeta() ListDocumentsMeta {
	if o == nil {
		return ListDocumentsMeta{}
	}
	return o.Meta
}

func (o *ListDocumentsResponseBody) GetData() []ListDocumentsData {
	if o == nil {
		return []ListDocumentsData{}
	}
	return o.Data
}

type ListDocumentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve a list of documents for the authenticated team.
	Object *ListDocumentsResponseBody
}

func (o *ListDocumentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListDocumentsResponse) GetObject() *ListDocumentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
